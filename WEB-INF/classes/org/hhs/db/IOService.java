package org.hhs.db;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;


 /**
 * Created by henriquedn on 4/14/14.
 * @author      Henry D.K Maina <henrydkm@gmail.com>
 * The contents of this file are subject to the GNU Lesser General Public License
 * Version 3.0 ; you may use this file in compliance with the License.
 */


public class IOService {

	static Logger log = Logger.getLogger(IOService.class.getName());
	static Connection con = null;
	static final boolean doLog = true;// this value can be a static reference from a global configuration to turn log on/off in the entire app

	public static DataSource getDataSource() {
		DataSource ds = null;
		try {
			Context ctx = new InitialContext();
			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/database");
			if(doLog) log.info("DataSource Created successfully");
		} catch (NamingException e) {
			if(doLog) log.severe("Unable to create DataSource : " + e.toString());
		}

		return ds;
	}

	public static Connection getConnection() {
		try {
			con = getDataSource().getConnection();
			if(doLog)  log.info("Connection Opened..");
		} catch (SQLException e) {
			if(doLog) log.severe("Unable to get Connection : " + e.toString());
		}
		return con;
	}

	public static PreparedStatement getStatement(String sql) {
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = getConnection().prepareStatement(sql);
			if(doLog) log.info("Preparing Statement..");
		} catch (SQLException e) {
			if(doLog) log.severe("Unable to Prepare Statement : " + e.toString());
		} catch (Exception ex) {
			if(doLog) log.severe("Error Preparing Statement : " + ex.toString());
		}
		return preparedStatement;
	}


	public static PreparedStatement getStatement(String sql, int autoGeneratedKeys) {
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = getConnection().prepareStatement(sql, autoGeneratedKeys);
			if(doLog) log.info("Preparing Statement..");
		} catch (SQLException e) {
			if(doLog) log.severe("Unable to Prepare Statement : " + e.toString());
		} catch (Exception ex) {
			if(doLog) log.severe("Error Preparing Statement : " + ex.toString());
		}
		return preparedStatement;
	}

	public static int executeStatement(PreparedStatement preparedStatement) {
		int es = -1;
		try {
			es = preparedStatement.executeUpdate(); // execute insert statement
			if(doLog) log.info("Executing Statement..");
		} catch (SQLException e) {
			if(doLog) log.severe("Error Executing Statement" + e.getMessage());
			es = -1;
		} catch (Exception e1) {
			if(doLog) log.severe("Error Executing Prepared Statement : " + e1.toString());
		} finally {
			if (preparedStatement != null) {
				Connection conn = null;
				try {
					conn = preparedStatement.getConnection();
					if(doLog) log.info("Connection Retrievd");
				} catch (SQLException e) {
					if(doLog) log.severe("Failed To Retrieve Connection : " + e.toString());
				}

				try {
					preparedStatement.close();
					if(doLog) log.info("Statement Closed");
				} catch (SQLException e) {
					if(doLog) log.severe("Error Closing Statement : " + e.toString());
				}

				if (conn != null) {
					try {
						conn.close();
						if(doLog) log.info("Connection Closed");
					} catch (SQLException e) {
						if(doLog) log.severe("Errot Closing Connection : " + e.toString());
					}
				}
			}
		}
		return es;
	}


	public static ResultSet executeStatementWithReturning(PreparedStatement preparedStatement) {
		int es = -1;
		ResultSet rs = null;
		try {
			if(doLog) log.info("Executing Statement.. : " + preparedStatement.toString());
			es = preparedStatement.executeUpdate(); // execute insert statement

			if(es != -1){
				rs = preparedStatement.getGeneratedKeys();
				if(doLog) log.info("Inserted Record Retrieved Statement..");
				return rs;
			}else{
				if(doLog) log.severe("Executing Update failed es : -1...");
				return null;
			}
		} catch (SQLException e) {
			if(doLog) log.severe("Error Executing Statement" + e.getMessage());
			es = -1;
			return null;
		} catch (Exception e1) {
			if(doLog) log.severe("Error Executing Prepared Statement : " + e1.toString());
			return null;
		}
	}

	public static ResultSet executeQuery(PreparedStatement preparedStatement) {
		ResultSet rs = null;
		try {
			rs = preparedStatement.executeQuery();
			if(doLog) log.info("Executing Statement..");
		} catch (Exception e) {
			if(doLog) log.severe("Error Executing Statement" + e.getMessage());
		}/*
		 * finally { if (preparedStatement != null) { try {
		 * preparedStatement.close(); } catch (SQLException e) {
		 * log.warning("Error Closing Prepared Statement : " + e.toString()); }
		 * }
		 *
		 * }
		 */
		return rs;
	}

	public static void close() {
		if (con != null) {
			try {
				con.close();
				if(doLog) log.info("Connection Closed");
			} catch (SQLException e) {
				if(doLog) log.severe("Failed To Close Connection : " + e.toString());
			}
		}
	}

	public static void close(ResultSet rs, PreparedStatement stmt) {

		if (rs != null) {
			try {
				rs.close();
				if(doLog) log.info("Resultset Closed");
			} catch (Exception e) {
				if(doLog) log.severe("Error Closing ResultSet : " + e.toString());
			}
		}

		if (stmt != null) {
			Connection conn = null;
			try {
				conn = stmt.getConnection();
				if(doLog) log.info("Connection Retrievd");
			} catch (Exception e) {
				if(doLog) log.severe("Failed To Retrieve Connection : " + e.toString());
			}

			try {
				stmt.close();
				if(doLog) log.info("Statement Closed");
			} catch (Exception e) {
				if(doLog) log.severe("Error Closing Statement : " + e.toString());
			}

			if (conn != null) {
				try {
					conn.close();
					if(doLog) log.info("Connection Closed");
				} catch (Exception e) {
					if(doLog) log.severe("Errot Closing Connection : " + e.toString());
				}
			}
		}
	}

}
